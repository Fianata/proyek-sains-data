Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Import library tambahan untuk visualisasi
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# --- PERSIAPAN DATA UNTUK VISUALISASI ---
# Pastikan DataFrame 'dataset' sudah ada dari skrip sebelumnya

# 1. Buat kolom label outlier tunggal untuk pewarnaan (1 jika outlier, 0 jika normal)
# Ini berguna untuk membedakan secara visual antara data normal dan semua jenis outlier
dataset['is_outlier_any'] = dataset['outlier_type'].apply(lambda x: 0 if x == 'Normal' else 1)

# 2. Siapkan data numerik dan lakukan scaling untuk PCA
numeric_columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
X = dataset[numeric_columns]
X_scaled = StandardScaler().fit_transform(X)


# --- MEMBUAT GRID VISUALISASI 2x3 ---
plt.style.use('seaborn-v0_8')
fig, axes = plt.subplots(2, 3, figsize=(20, 12))
fig.suptitle('Dashboard Analisis Dataset Iris', fontsize=20, fontweight='bold')

# 1. Komposisi Kategori Outlier (Adaptasi dari Histogram)
sns.countplot(data=dataset, x='outlier_type', ax=axes[0, 0], palette='viridis')
axes[0, 0].set_title('Jumlah Data per Kategori Outlier', fontsize=14)
axes[0, 0].set_xlabel('Kategori Outlier')
axes[0, 0].set_ylabel('Jumlah')
axes[0, 0].tick_params(axis='x', rotation=15)

# 2. Scatter plot - Sepal Length vs Width
scatter1 = axes[0, 1].scatter(dataset['sepal_length'], dataset['sepal_width'],
                              c=dataset['is_outlier_any'], cmap='coolwarm', alpha=0.8, s=50)
axes[0, 1].set_xlabel('Panjang Sepal')
axes[0, 1].set_ylabel('Lebar Sepal')
axes[0, 1].set_title('Sepal: Panjang vs Lebar', fontsize=14)
fig.colorbar(scatter1, ax=axes[0, 1], label='Status Outlier (1=Ya, 0=Tidak)')

# 3. Scatter plot - Petal Length vs Width
scatter2 = axes[0, 2].scatter(dataset['petal_length'], dataset['petal_width'],
                              c=dataset['is_outlier_any'], cmap='coolwarm', alpha=0.8, s=50)
axes[0, 2].set_xlabel('Panjang Petal')
axes[0, 2].set_ylabel('Lebar Petal')
axes[0, 2].set_title('Petal: Panjang vs Lebar', fontsize=14)
fig.colorbar(scatter2, ax=axes[0, 2], label='Status Outlier (1=Ya, 0=Tidak)')

# 4. Boxplot untuk setiap Fitur berdasarkan Status Outlier
sns.boxplot(data=dataset, x='is_outlier_any', y='petal_length', ax=axes[1, 0])
axes[1, 0].set_title('Boxplot Lebar Petal: Normal vs Outlier', fontsize=14)
axes[1, 0].set_xlabel('Status Outlier (0 = Normal, 1 = Outlier)')
axes[1, 0].set_ylabel('Panjang Petal')

# 5. Visualisasi PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
scatter3 = axes[1, 1].scatter(X_pca[:, 0], X_pca[:, 1], c=dataset['is_outlier_any'],
                              cmap='coolwarm', alpha=0.8, s=50)
axes[1, 1].set_xlabel(f'Komponen Utama 1 ({pca.explained_variance_ratio_[0]:.2%} varians)')
axes[1, 1].set_ylabel(f'Komponen Utama 2 ({pca.explained_variance_ratio_[1]:.2%} varians)')
axes[1, 1].set_title('Visualisasi PCA 2 Komponen', fontsize=14)
fig.colorbar(scatter3, ax=axes[1, 1], label='Status Outlier (1=Ya, 0=Tidak)')

# 6. Heatmap Korelasi Fitur
corr_matrix = dataset[numeric_columns].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0, ax=axes[1, 2], fmt='.2f')
axes[1, 2].set_title('Heatmap Korelasi Fitur', fontsize=14)

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()


# --- ANALISIS TEKSTUAL DARI OUTLIER YANG TERDETEKSI ---
print("\n" + "="*60)
print("Analisis Mendalam dari Outlier yang Terdeteksi")
print("="*60)

# Tampilkan detail dari semua data yang terdeteksi sebagai outlier
outliers_df = dataset[dataset['is_outlier_any'] == 1]
print(f"\nTotal outlier terdeteksi: {len(outliers_df)} data")
print("\nDetail data outlier:")
print(outliers_df[['id', 'class', 'outlier_type'] + numeric_columns])


# Bandingkan statistik antara data normal dan data outlier
normal_data = dataset[dataset['is_outlier_any'] == 0][numeric_columns]
outlier_data = dataset[dataset['is_outlier_any'] == 1][numeric_columns]

print("\n\n" + "="*60)
print("Perbandingan Statistik: Data Normal vs Data Outlier")
print("="*60)
print(f"{'Fitur':<15} {'Rata-rata Normal':<20} {'Rata-rata Outlier':<20} {'Perbedaan':<10}")
print("-" * 70)
for col in numeric_columns:
    normal_mean = normal_data[col].mean()
    outlier_mean = outlier_data[col].mean()
    diff = abs(outlier_mean - normal_mean)
    print(f"{col:<15} {normal_mean:<20.3f} {outlier_mean:<20.3f} {diff:<10.3f}")
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[4], line 12[0m
[1;32m      5[0m [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mdecomposition[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m PCA
[1;32m      7[0m [38;5;66;03m# --- PERSIAPAN DATA UNTUK VISUALISASI ---[39;00m
[1;32m      8[0m [38;5;66;03m# Pastikan DataFrame 'dataset' sudah ada dari skrip sebelumnya[39;00m
[1;32m      9[0m 
[1;32m     10[0m [38;5;66;03m# 1. Buat kolom label outlier tunggal untuk pewarnaan (1 jika outlier, 0 jika normal)[39;00m
[1;32m     11[0m [38;5;66;03m# Ini berguna untuk membedakan secara visual antara data normal dan semua jenis outlier[39;00m
[0;32m---> 12[0m dataset[[38;5;124m'[39m[38;5;124mis_outlier_any[39m[38;5;124m'[39m] [38;5;241m=[39m [43mdataset[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43moutlier_type[39;49m[38;5;124;43m'[39;49m[43m][49m[38;5;241m.[39mapply([38;5;28;01mlambda[39;00m x: [38;5;241m0[39m [38;5;28;01mif[39;00m x [38;5;241m==[39m [38;5;124m'[39m[38;5;124mNormal[39m[38;5;124m'[39m [38;5;28;01melse[39;00m [38;5;241m1[39m)
[1;32m     14[0m [38;5;66;03m# 2. Siapkan data numerik dan lakukan scaling untuk PCA[39;00m
[1;32m     15[0m numeric_columns [38;5;241m=[39m [[38;5;124m'[39m[38;5;124msepal_length[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124msepal_width[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mpetal_length[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mpetal_width[39m[38;5;124m'[39m]

[0;31mTypeError[0m: 'NoneType' object is not subscriptable

